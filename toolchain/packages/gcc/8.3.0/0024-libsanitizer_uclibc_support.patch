---
 libbacktrace/getpagesize.h                                       |   42 +++++++++
 libbacktrace/mmap.c                                              |    1 
 libbacktrace/mmapio.c                                            |    1 
 libsanitizer/asan/asan_linux.cc                                  |    3 
 libsanitizer/interception/interception_linux.cc                  |    4 
 libsanitizer/interception/interception_linux.h                   |    6 +
 libsanitizer/sanitizer_common/sanitizer_common_syscalls.inc      |    4 
 libsanitizer/sanitizer_common/sanitizer_linux.cc                 |    3 
 libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc |   18 +++-
 libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h  |   45 +++++++++-
 10 files changed, 114 insertions(+), 13 deletions(-)

--- /dev/null
+++ b/libbacktrace/getpagesize.h
@@ -0,0 +1,42 @@
+/* getpagesize.h -- Public header file for stack backtrace library.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+
+    (1) Redistributions of source code must retain the above copyright
+    notice, this list of conditions and the following disclaimer.
+
+    (2) Redistributions in binary form must reproduce the above copyright
+    notice, this list of conditions and the following disclaimer in
+    the documentation and/or other materials provided with the
+    distribution.
+
+    (3) The name of the author may not be used to
+    endorse or promote products derived from this software without
+    specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGE.  */
+
+#ifndef GETPAGESIZE_H
+#define GETPAGESIZE_H
+
+#if defined(__linux__)
+#include <features.h>
+#if defined(__UCLIBC__)
+#undef getpagesize
+#define getpagesize() 4096
+#endif
+#endif
+
+#endif
--- a/libbacktrace/mmap.c
+++ b/libbacktrace/mmap.c
@@ -41,6 +41,7 @@
 
 #include "backtrace.h"
 #include "internal.h"
+#include "getpagesize.h"
 
 /* Memory allocation on systems that provide anonymous mmap.  This
    permits the backtrace functions to be invoked from a signal
--- a/libbacktrace/mmapio.c
+++ b/libbacktrace/mmapio.c
@@ -39,6 +39,7 @@
 
 #include "backtrace.h"
 #include "internal.h"
+#include "getpagesize.h"
 
 #ifndef MAP_FAILED
 #define MAP_FAILED ((void *)-1)
--- a/libsanitizer/asan/asan_linux.cc
+++ b/libsanitizer/asan/asan_linux.cc
@@ -21,6 +21,7 @@
 #include "sanitizer_common/sanitizer_libc.h"
 #include "sanitizer_common/sanitizer_procmaps.h"
 
+#include <features.h>
 #include <sys/time.h>
 #include <sys/resource.h>
 #include <sys/mman.h>
@@ -88,7 +89,7 @@
   UNIMPLEMENTED();
 }
 
-#if SANITIZER_ANDROID
+#if SANITIZER_ANDROID || defined(__UCLIBC__)
 // FIXME: should we do anything for Android?
 void AsanCheckDynamicRTPrereqs() {}
 void AsanCheckIncompatibleRT() {}
--- a/libsanitizer/interception/interception_linux.cc
+++ b/libsanitizer/interception/interception_linux.cc
@@ -30,11 +30,11 @@
   return real == wrapper;
 }
 
-#if !defined(__ANDROID__)  // android does not have dlvsym
+#if !defined(__ANDROID__) && !defined(__UCLIBC__) // android and uClibc do not have dlvsym
 void *GetFuncAddrVer(const char *func_name, const char *ver) {
   return dlvsym(RTLD_NEXT, func_name, ver);
 }
-#endif  // !defined(__ANDROID__)
+#endif  // !defined(__ANDROID__) && !defined(__UCLIBC__)
 
 }  // namespace __interception
 
--- a/libsanitizer/interception/interception_linux.h
+++ b/libsanitizer/interception/interception_linux.h
@@ -19,6 +19,10 @@
 #ifndef INTERCEPTION_LINUX_H
 #define INTERCEPTION_LINUX_H
 
+#if defined(__linux__)
+#include <features.h>
+#endif
+
 namespace __interception {
 // returns true if a function with the given name was found.
 bool GetRealFunctionAddress(const char *func_name, uptr *func_addr,
@@ -32,7 +36,7 @@
       (::__interception::uptr) & (func),                                   \
       (::__interception::uptr) & WRAP(func))
 
-#if !defined(__ANDROID__)  // android does not have dlvsym
+#if !defined(__ANDROID__) && !defined(__UCLIBC__)  // android and uClibc do not have dlvsym
 #define INTERCEPT_FUNCTION_VER_LINUX_OR_FREEBSD(func, symver) \
   (::__interception::real_##func = (func##_f)(                \
        unsigned long)::__interception::GetFuncAddrVer(#func, symver))
--- a/libsanitizer/sanitizer_common/sanitizer_common_syscalls.inc
+++ b/libsanitizer/sanitizer_common/sanitizer_common_syscalls.inc
@@ -921,7 +921,7 @@
   }
 }
 
-#if !SANITIZER_ANDROID
+#if !SANITIZER_ANDROID && !defined(__UCLIBC__)
 PRE_SYSCALL(ustat)(long dev, void *ubuf) {}
 
 POST_SYSCALL(ustat)(long res, long dev, void *ubuf) {
@@ -929,7 +929,7 @@
     if (ubuf) POST_WRITE(ubuf, struct_ustat_sz);
   }
 }
-#endif  // !SANITIZER_ANDROID
+#endif  // !SANITIZER_ANDROID && !__UCLIBC__
 
 PRE_SYSCALL(stat64)(const void *filename, void *statbuf) {
   if (filename)
--- a/libsanitizer/sanitizer_common/sanitizer_linux.cc
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.cc
@@ -50,6 +50,7 @@
 #include <fcntl.h>
 #include <link.h>
 #include <pthread.h>
+#include <features.h>
 #include <sched.h>
 #include <sys/mman.h>
 #include <sys/ptrace.h>
@@ -1000,7 +1001,7 @@
 
 uptr GetPageSize() {
 // Android post-M sysconf(_SC_PAGESIZE) crashes if called from .preinit_array.
-#if SANITIZER_ANDROID
+#if SANITIZER_ANDROID || defined(__UCLIBC__)
   return 4096;
 #elif SANITIZER_LINUX && (defined(__x86_64__) || defined(__i386__))
   return EXEC_PAGESIZE;
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc
@@ -12,6 +12,10 @@
 
 #include "sanitizer_platform.h"
 
+#ifndef __GLIBC_PREREQ
+#define __GLIBC_PREREQ(x, y) 0
+#endif
+
 #if SANITIZER_LINUX || SANITIZER_FREEBSD || SANITIZER_MAC
 // Tests in this file assume that off_t-dependent data structures match the
 // libc ABI. For example, struct dirent here is what readdir() function (as
@@ -141,7 +145,9 @@
 #include <net/if_ppp.h>
 #include <netax25/ax25.h>
 #include <netipx/ipx.h>
+#if !defined(__UCLIBC__)
 #include <netrom/netrom.h>
+#endif
 #if HAVE_RPC_XDR_H
 # include <rpc/xdr.h>
 #elif HAVE_TIRPC_RPC_XDR_H
@@ -157,6 +163,9 @@
 # include <sys/procfs.h>
 #endif
 #include <sys/user.h>
+#if !defined(__UCLIBC__) && !__GLIBC_PREREQ(2, 28)
+ #include <sys/ustat.h>
+#endif
 #include <linux/cyclades.h>
 #include <linux/if_eql.h>
 #include <linux/if_plip.h>
@@ -476,7 +485,9 @@
   unsigned struct_kbkeycode_sz = sizeof(struct kbkeycode);
   unsigned struct_kbsentry_sz = sizeof(struct kbsentry);
   unsigned struct_mtconfiginfo_sz = sizeof(struct mtconfiginfo);
+#if !defined(__UCLIBC__)
   unsigned struct_nr_parms_struct_sz = sizeof(struct nr_parms_struct);
+#endif
   unsigned struct_scc_modem_sz = sizeof(struct scc_modem);
   unsigned struct_scc_stat_sz = sizeof(struct scc_stat);
   unsigned struct_serial_multiport_struct_sz
@@ -911,10 +922,12 @@
   unsigned IOCTL_SIOCAX25SETPARMS = SIOCAX25SETPARMS;
   unsigned IOCTL_SIOCDEVPLIP = SIOCDEVPLIP;
   unsigned IOCTL_SIOCIPXCFGDATA = SIOCIPXCFGDATA;
+#if !defined(__UCLIBC__)
   unsigned IOCTL_SIOCNRDECOBS = SIOCNRDECOBS;
   unsigned IOCTL_SIOCNRGETPARMS = SIOCNRGETPARMS;
   unsigned IOCTL_SIOCNRRTCTL = SIOCNRRTCTL;
   unsigned IOCTL_SIOCNRSETPARMS = SIOCNRSETPARMS;
+#endif
   unsigned IOCTL_TIOCGSERIAL = TIOCGSERIAL;
   unsigned IOCTL_TIOCSERGETMULTI = TIOCSERGETMULTI;
   unsigned IOCTL_TIOCSERSETMULTI = TIOCSERSETMULTI;
@@ -1068,9 +1081,6 @@
 // Can't write checks for sa_handler and sa_sigaction due to them being
 // preprocessor macros.
 CHECK_STRUCT_SIZE_AND_OFFSET(sigaction, sa_mask);
-#ifndef __GLIBC_PREREQ
-#define __GLIBC_PREREQ(x, y) 0
-#endif
 #if !defined(__s390x__) || __GLIBC_PREREQ (2, 20)
 // On s390x glibc 2.19 and earlier sa_flags was unsigned long, and sa_resv
 // didn't exist.
@@ -1245,7 +1255,7 @@
 COMPILER_CHECK(__sanitizer_XDR_FREE == XDR_FREE);
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && !defined(__UCLIBC__)
 COMPILER_CHECK(sizeof(__sanitizer_FILE) <= sizeof(FILE));
 CHECK_SIZE_AND_OFFSET(FILE, _flags);
 CHECK_SIZE_AND_OFFSET(FILE, _IO_read_ptr);
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
@@ -18,6 +18,10 @@
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_platform.h"
 
+#ifdef __linux__
+#include <features.h>
+#endif
+
 #if SANITIZER_FREEBSD
 // FreeBSD's dlopen() returns a pointer to an Obj_Entry structure that
 // incorporates the map structure.
@@ -84,9 +88,17 @@
   const unsigned struct_kernel_stat_sz = 144;
   const unsigned struct_kernel_stat64_sz = 104;
 #elif defined(__mips__)
+#if defined(__UCLIBC__)
+#if defined(__USE_FILE_OFFSET64)
+  const unsigned struct_kernel_stat_sz = 160;
+#else
+  const unsigned struct_kernel_stat_sz = 152;
+#endif
+#else
   const unsigned struct_kernel_stat_sz =
                  SANITIZER_ANDROID ? FIRST_32_SECOND_64(104, 128) :
                                      FIRST_32_SECOND_64(160, 216);
+#endif
   const unsigned struct_kernel_stat64_sz = 104;
 #elif defined(__s390__) && !defined(__s390x__)
   const unsigned struct_kernel_stat_sz = 64;
@@ -194,7 +206,9 @@
     int v[10];
   };
 
+#if !defined(__UCLIBC__)
   extern unsigned struct_ustat_sz;
+#endif
   extern unsigned struct_rlimit64_sz;
   extern unsigned struct_statvfs64_sz;
 
@@ -581,10 +595,23 @@
 #elif SANITIZER_MAC
   typedef unsigned __sanitizer_sigset_t;
 #elif SANITIZER_LINUX
+
+#if defined(__UCLIBC__)
+#if defined(__mips__)
+#define _SIGSET_NWORDS (128/(8*sizeof(unsigned long)))
+#else
+#define _SIGSET_NWORDS (64/(8*sizeof(unsigned long)))
+#endif
+  struct __sanitizer_sigset_t {
+    unsigned long __val[_SIGSET_NWORDS];
+  };
+#else
   struct __sanitizer_sigset_t {
     // The size is determined by looking at sizeof of real sigset_t on linux.
     uptr val[128 / sizeof(uptr)];
   };
+#endif
+
 #elif SANITIZER_FREEBSD
   struct __sanitizer_sigset_t {
      // uint32_t * 4
@@ -622,7 +649,17 @@
     uptr sa_flags;
     void (*sa_restorer)();
   };
-#else // !SANITIZER_ANDROID
+#elif defined(__mips__) && defined(__UCLIBC__)
+  struct __sanitizer_sigaction {
+    unsigned sa_flags;
+    union {
+      void (*handler)(int sig);
+      void (*sigaction)(int sig, void *siginfo, void *uctx);
+    };
+    __sanitizer_sigset_t sa_mask;
+    void (*sa_restorer)();
+  };
+#else // !SANITIZER_ANDROID && !(__mips__ && __UCLIBC__)
   struct __sanitizer_sigaction {
 #if defined(__mips__) && !SANITIZER_FREEBSD
     unsigned int sa_flags;
@@ -813,7 +850,7 @@
 #endif
   };
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && !defined(__UCLIBC__)
   struct __sanitizer_FILE {
     int _flags;
     char *_IO_read_ptr;
@@ -1025,7 +1062,9 @@
   extern unsigned struct_kbkeycode_sz;
   extern unsigned struct_kbsentry_sz;
   extern unsigned struct_mtconfiginfo_sz;
+#if !defined(__UCLIBC__)
   extern unsigned struct_nr_parms_struct_sz;
+#endif
   extern unsigned struct_scc_modem_sz;
   extern unsigned struct_scc_stat_sz;
   extern unsigned struct_serial_multiport_struct_sz;
@@ -1436,10 +1475,12 @@
   extern unsigned IOCTL_SIOCAX25SETPARMS;
   extern unsigned IOCTL_SIOCDEVPLIP;
   extern unsigned IOCTL_SIOCIPXCFGDATA;
+#if !defined(__UCLIBC__)
   extern unsigned IOCTL_SIOCNRDECOBS;
   extern unsigned IOCTL_SIOCNRGETPARMS;
   extern unsigned IOCTL_SIOCNRRTCTL;
   extern unsigned IOCTL_SIOCNRSETPARMS;
+#endif
   extern unsigned IOCTL_SNDCTL_DSP_GETISPACE;
   extern unsigned IOCTL_SNDCTL_DSP_GETOSPACE;
   extern unsigned IOCTL_TIOCGSERIAL;
